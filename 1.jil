1a) Develop a Julia program to simulate a calculator (for integer and real
numbers).
# Function to perform addition
function add(x, y)
return x + y
end
# Function to perform subtraction
function subtract(x, y)
return x - y
end
# Function to perform multiplication
function multiply(x, y)
return x * y
end
# Function to perform division
function divide(x, y)
if y == 0
println("Error: Division by zero")
return NaN
else
return x / y
end
end
# Main function
function main()
println("Welcome to the Calculator Program")
println("Enter two numbers:")
num1 = parse(Float64, readline()) # Input first number
num2 = parse(Float64, readline()) # Input second number
println("Choose an operation:")
println("1. Addition (+)")
println("2. Subtraction (-)")
println("3. Multiplication (*)")
println("4. Division (/)")
operation = readline()
if operation == "1"
result = add(num1, num2)
println("Result: ", result)
elseif operation == "2"
result = subtract(num1, num2)
println("Result: ", result)
elseif operation == "3"
result = multiply(num1, num2)
println("Result: ", result)
elseif operation == "4"
result = divide(num1, num2)
println("Result: ", result)
else
println("Invalid operation selected")
end
end
# Call the main function
main()
Output

1b) Develop a Julia program to add, subtract, multiply and divide complex
numbers.
function add_complex(c1, c2)
return complex(c1.re + c2.re, c1.im + c2.im)
end
function subtract_complex(c1, c2)
return complex(c1.re - c2.re, c1.im - c2.im)
end
function multiply_complex(c1, c2)
return complex(c1.re * c2.re - c1.im * c2.im, c1.re * c2.im + c1.im *
c2.re)
end
function divide_complex(c1, c2)
denominator = c2.re^2 + c2.im^2
return complex((c1.re * c2.re + c1.im * c2.im) / denominator, (c1.im *
c2.re - c1.re * c2.im) / denominator)
end
# Example usage
c1 = complex(12, 8)
c2 = complex(3, 4)
println("c1 = ", c1)
println("c2 = ", c2)
println("c1 + c2 = ", add_complex(c1, c2))
println("c1 - c2 = ", subtract_complex(c1, c2))
println("c1 * c2 = ", multiply_complex(c1, c2))
println("c1 / c2 = ", divide_complex(c1, c2))
Output

1c) Develop a Julia program to evaluate expressions having mixed datatypes
(integer, real, floating-point number and complex).
# Function to evaluate an expression
function evaluate_expression(expression)
try
result = eval(Meta.parse(expression))
println("Result: $result")
catch e
println("Error: $e")
end
end
# Main function
function main()
println("Enter an expression to evaluate:")
expression = readline()
evaluate_expression(expression)
end
# Call the main function
main()
Output
